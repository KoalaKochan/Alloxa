version: '3.8'

services:
  # Торговый бот
  trading-bot:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: solana-trading-bot
    restart: unless-stopped
    ports:
      - "3000:3000"
    env_file:
      - ../.env
    environment:
      # - REQUIRE_LP_PROTECTION=false  # Отключаем требование LP защиты
      # - MAX_PRICE_IMPACT_BPS=500  # Увеличиваем до 5%
      # - MAX_POOL_SIZE=50000  # Максимальный размер пула 50,000 SOL
      
      # # Backfill настройки
      # - BACKFILL_SLOTS=50  # Количество слотов для backfill при старте
      # - POOL_MAX_AGE_MS=7200000    # 2 часа вместо 24
      # - MIN_SOCIAL_LINKS=0         # Отключить соцсети  
      # - MIN_POOL_SIZE=0.001       # 0.001 SOL минимум
      # # TP/SL настройки
      # - TAKE_PROFIT=50  # 50% прибыли
      # - STOP_LOSS=30  # 30% убытка
      # - TRAILING_STOP_LOSS=false  # Отключен trailing stop loss
      # - SKIP_SELLING_IF_LOST_MORE_THAN=0  # Отключена защита от больших потерь
      # - AUTO_SELL=true  # Включаем автопродажу
      # - PRICE_CHECK_DURATION=200000  # 200 секунд мониторинга
      # - PRICE_CHECK_INTERVAL=2000  # Проверка каждые 2 секунды
    volumes:
      - ../logs:/app/logs
      - bot-data:/app/data
    networks:
      - trading-network
    depends_on:
      - prometheus
      - loki

  # Prometheus для метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - trading-network

  # Loki для логов
  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yml:/etc/loki/local-config.yaml
      - loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - trading-network

  # Grafana для дашбордов
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - trading-network
    depends_on:
      - prometheus
      - loki

  # Promtail для сбора логов
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./promtail/promtail-config.yml:/etc/promtail/config.yml
      - /var/log/containers:/var/log/containers:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - trading-network
    depends_on:
      - loki

  # Node Exporter для системных метрик
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - trading-network

volumes:
  prometheus-data:
  loki-data:
  grafana-data:
  bot-data:

networks:
  trading-network:
    driver: bridge
